import os
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from django.core.cache import cache
from users.models import User, Profile
from projects.models import Notification, Project
from asgiref.sync import sync_to_async
from dotenv import load_dotenv
from django.core.management.base import BaseCommand

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# --------- UTILS ---------
@sync_to_async
def get_user_profile(user):
    return user.profile

@sync_to_async
def get_user_by_id(user_id):
    try:
        return User.objects.get(pk=user_id)
    except User.DoesNotExist:
        return None



@sync_to_async
def get_user_by_chat_id(chat_id):
    try:
        return User.objects.filter(profile__telegram_chat_id=chat_id).first()
    except User.DoesNotExist:
        return None

@sync_to_async
def save_telegram_chat_id(user, chat_id):
    if hasattr(user, "profile"):
        user.profile.telegram_chat_id = chat_id
        user.profile.save()

# --------- COMMANDS ---------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args:
        token = args[0]
        user_id = cache.get(f'tg_link_{token}')
        print(f"Trying to get user from token: tg_link_{token}, user_id: {user_id}")

        if user_id is not None:
            user = await get_user_by_id(user_id)
            if user is not None:
                await save_telegram_chat_id(user, update.message.chat_id)
                await update.message.reply_text("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É ScholarHub!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫ –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
    else:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ScholarHub –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_chat_id(update.message.chat_id)
    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç ScholarHub.")
        return
    profile = await get_user_profile(user)

    await update.message.reply_text(
        f"üë§ <b>Username:</b> {user.username}\n"
        f"üìß <b>Email:</b> {user.email}\n"
        f"üåç <b>Country:</b> {profile.country or 'Not set'}",
        parse_mode='HTML'
    )

async def notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_chat_id(update.message.chat_id)
    if user:
        notes = await sync_to_async(list)(Notification.objects.filter(user=user).order_by('-created_at')[:5])
        if notes:
            text = "\n\n".join([f"üîî {n.message}" for n in notes])
            await update.message.reply_text(text)
        else:
            await update.message.reply_text("üîî –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def projects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_chat_id(update.message.chat_id)
    if user:
        projects = await sync_to_async(list)(Project.objects.filter(owner=user))
        if projects:
            text = "\n\n".join([f"üìÅ {p.title}" for p in projects])
            await update.message.reply_text(text)
        else:
            await update.message.reply_text("üìÇ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ:\n"
        "üëâ https://scholarhub.kz/settings/"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n"
        "/notifications - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/projects - –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/help - –ü–æ–º–æ—â—å\n"
    )

# --------- SETUP MENU ---------
async def set_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ScholarHub"),
        BotCommand("profile", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand("notifications", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("projects", "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"),
        BotCommand("settings", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand("help", "–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã"),
    ])

# --------- DJANGO COMMAND ---------
class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç ScholarHub Telegram-–±–æ—Ç–∞"

    def handle(self, *args, **options):
        if not TELEGRAM_BOT_TOKEN:
            self.stdout.write(self.style.ERROR('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ env!'))
            return

        app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("profile", profile))
        app.add_handler(CommandHandler("notifications", notifications))
        app.add_handler(CommandHandler("projects", projects))
        app.add_handler(CommandHandler("settings", settings))
        app.add_handler(CommandHandler("help", help_command))

        app.post_init = set_commands  # üëà –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞

        self.stdout.write(self.style.SUCCESS("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."))
        app.run_polling()
